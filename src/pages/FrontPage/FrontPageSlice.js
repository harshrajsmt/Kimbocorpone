import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchData } from './FrontPageAPI';

const initialState = {
  value: 0,
  status: 'idle',
};

// This will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getDataAsync = createAsyncThunk(
  'FrontPage/fetchData',
  async (data) => {
    const response = await fetchData(data);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const FrontPageSlice = createSlice({
  name: 'FrontPage',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getData: (state,{payload}) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getDataAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getDataAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

export const { getData } = FrontPageSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. 
export const selectData = (state) => state.FrontPage.value;



export default FrontPageSlice.reducer;
